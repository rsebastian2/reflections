1) What happens when you initialize a repository? Why do you need to do it?

Git init initializes the metadata directory .git but does perform any adds
or commits.  The user may add and commit the files as they wish with appropriate
comments which git could not supply.  

2) How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area is a list of files ready for commit.  The working directory 
actually contains the files.  The repository contains the metadata to track
and recover commited versions of the files.  "Staging area" provides a 
better conceptual mapping to usage than the generic term list.

3) How can you use the staging area to make sure you have one commit per 
logical change?
Add the files changed to perform a logical change to the staging area.
Review the changes using git diff --staged.  When satisfied that all the
required files are correct and in the staging area perform a commit to
move the files from the staging area to the repository.

4) What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?
If a project is large enough that multiple developers are working simultaneously
branching allows independent progress on branches without breaking the master.
A branch for each logical change provides a sandbox for individual developers
to work within while maintaining a working version for managerial visitors.
Branches are also useful for recording versions prior to and after inspections
and testing.  A branch may be also used to record release versions.

5) How do the diagrams help you visualize the branch structure?
Development is an inherently tree like development.  One starts with an
initial commit (the root) and development spreads from the root mainly along
the master branch (the trunk).  Any significant changes or large chunks
of work should be performed on a branch so that the working master is
protected.  Any node that lies between the current node and the root is 
reachable.  Any node that lies on another branch (that has not been merged
back into master is unreachable; i.e. checking out an unreachable node would
include some code which never appeared on the other branch).
